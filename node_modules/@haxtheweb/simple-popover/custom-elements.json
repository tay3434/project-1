{
  "version": 1,
  "tags": [
    {
      "name": "simple-popover-manager",
      "description": "Attributes:\n\n  * `popover` - \n\n  * `opened` {`boolean`} - \n\n  * `orientation` {`string`} - \n\n  * `position` {`string`} - \n\nProperties:\n\n  * `popover` - \n\n  * `opened` {`boolean`} - \n\n  * `context` - \n\n  * `orientation` {`string`} - \n\n  * `position` {`string`} - \n\n  * `__ignore` {`boolean`} - ",
      "attributes": [
        {
          "name": "popover",
          "description": "`popover` - \n\nProperty: popover\n\nDefault: null"
        },
        {
          "name": "opened",
          "description": "`opened` {`boolean`} - \n\nProperty: opened\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "orientation",
          "description": "`orientation` {`string`} - \n\nProperty: orientation\n\nDefault: tb"
        },
        {
          "name": "position",
          "description": "`position` {`string`} - \n\nProperty: position\n\nDefault: bottom"
        }
      ]
    },
    {
      "name": "simple-popover-selection",
      "description": "Events:\n\n  * `simple-popover-selection-changed` {`CustomEvent<any>`} - \n\nAttributes:\n\n  * `opened` {`boolean`} - \n\n  * `disabled` {`boolean`} - disabled state\n\n  * `event` {`string`} - event activation type\n\nProperties:\n\n  * `opened` {`boolean`} - \n\n  * `disabled` {`boolean`} - disabled state\n\n  * `event` {`string`} - event activation type",
      "attributes": [
        {
          "name": "opened",
          "description": "`opened` {`boolean`} - \n\nProperty: opened\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "disabled",
          "description": "`disabled` {`boolean`} - disabled state\n\nProperty: disabled\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "event",
          "description": "`event` {`string`} - event activation type\n\nProperty: event\n\nDefault: click"
        },
        {
          "name": "onsimple-popover-selection-changed",
          "description": "`simple-popover-selection-changed` {`CustomEvent<any>`} - "
        }
      ]
    },
    {
      "name": "simple-tour",
      "description": "Events:\n\n  * `tour-changed` {`CustomEvent<this>`} - \n\nAttributes:\n\n  * `stacks` - \n\n  * `active` {`string`} - \n\n  * `activeElementDelay` {`number`} - \n\n  * `stop` {`number`} - \n\nProperties:\n\n  * `stacks` - \n\n  * `orientation` {`string`} - \n\n  * `active` {`string`} - \n\n  * `tourInfo` - \n\n  * `activeElementDelay` {`number`} - \n\n  * `stop` {`number`} - ",
      "attributes": [
        {
          "name": "stacks",
          "description": "`stacks` - \n\nProperty: stacks\n\nDefault: [object Object]"
        },
        {
          "name": "active",
          "description": "`active` {`string`} - \n\nProperty: active\n\nDefault: null"
        },
        {
          "name": "activeElementDelay",
          "description": "`activeElementDelay` {`number`} - \n\nProperty: activeElementDelay\n\nDefault: 500"
        },
        {
          "name": "stop",
          "description": "`stop` {`number`} - \n\nProperty: stop\n\nDefault: -1"
        },
        {
          "name": "ontour-changed",
          "description": "`tour-changed` {`CustomEvent<this>`} - "
        }
      ]
    },
    {
      "name": "simple-popover",
      "description": "`simple-popover`\na popover alertdialog that is positioned next to a target element\n\n### Styling\n\n`<simple-popover>` provides the following custom properties\nfor styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--simple-popover-border-radius` | popover border-radius | 3px\n`--simple-popover-color` | popover text color| #222\n`--simple-popover-padding` | popover padding | 10px\n`--simple-popover-background-color` | popover background-color | white\n`--simple-popover-border-color` | popover border-color | #bbb\n`--simple-popover-box-shadow` | popover box-shadow | rgba(60, 64, 67, 0.3) 0px 4px 8px 3px;\n\nAttributes:\n\n  * `allow-overlap` {`boolean`} - Element has absolututely positioned children, such as menus\nand tooltips that are allowed to overlap the target\n\n  * `position-align` {`string`} - Aligns at the start, or end fo target. Default is centered.\n\n  * `justify` {`boolean`} - \n\n  * `auto` {`boolean`} - Element is positioned from connected to disconnected?\nOtherwise setPosition and unsetPosition must be called manually.\n\n  * `fit-to-visible-bounds` {`boolean`} - If true, no parts of the tooltip will ever be shown offscreen.\n\n  * `for` {`string`} - The id of the element that the tooltip is anchored to. This element\nmust be a sibling of the tooltip. If this property is not set,\nthen the tooltip will be centered to the parent node containing it.\n\n  * `offset` {`number`} - The spacing between the top of the tooltip and the element it is\nanchored to.\n\n  * `position` {`string`} - Positions the tooltip to the top, right, bottom, left of its content.\n\n  * `target` - The actual target element\n\n  * `sticky` {`boolean`} - Stays on screen while target is on screen\n\n  * `hidden` {`boolean`} - If true, no parts of the tooltip will ever be shown offscreen.\n\n  * `__positions` - The element's style\n\nProperties:\n\n  * `allowOverlap` {`boolean`} - Element has absolututely positioned children, such as menus\nand tooltips that are allowed to overlap the target\n\n  * `positionAlign` {`string`} - Aligns at the start, or end fo target. Default is centered.\n\n  * `justify` {`boolean`} - \n\n  * `_ticking` {`boolean`} - \n\n  * `scrollTarget` - \n\n  * `auto` {`boolean`} - Element is positioned from connected to disconnected?\nOtherwise setPosition and unsetPosition must be called manually.\n\n  * `fitToVisibleBounds` {`boolean`} - If true, no parts of the tooltip will ever be shown offscreen.\n\n  * `for` {`string`} - The id of the element that the tooltip is anchored to. This element\nmust be a sibling of the tooltip. If this property is not set,\nthen the tooltip will be centered to the parent node containing it.\n\n  * `offset` {`number`} - The spacing between the top of the tooltip and the element it is\nanchored to.\n\n  * `position` {`string`} - Positions the tooltip to the top, right, bottom, left of its content.\n\n  * `target` - The actual target element\n\n  * `sticky` {`boolean`} - Stays on screen while target is on screen\n\n  * `hidden` {`boolean`} - If true, no parts of the tooltip will ever be shown offscreen.\n\n  * `__positions` - The element's style\n\n  * `__observe` {`boolean`} - ",
      "attributes": [
        {
          "name": "allow-overlap",
          "description": "`allow-overlap` {`boolean`} - Element has absolututely positioned children, such as menus\nand tooltips that are allowed to overlap the target\n\nProperty: allowOverlap",
          "valueSet": "v"
        },
        {
          "name": "position-align",
          "description": "`position-align` {`string`} - Aligns at the start, or end fo target. Default is centered.\n\nProperty: positionAlign"
        },
        {
          "name": "justify",
          "description": "`justify` {`boolean`} - \n\nProperty: justify",
          "valueSet": "v"
        },
        {
          "name": "auto",
          "description": "`auto` {`boolean`} - Element is positioned from connected to disconnected?\nOtherwise setPosition and unsetPosition must be called manually.\n\nProperty: auto\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "fit-to-visible-bounds",
          "description": "`fit-to-visible-bounds` {`boolean`} - If true, no parts of the tooltip will ever be shown offscreen.\n\nProperty: fitToVisibleBounds\n\nDefault: true",
          "valueSet": "v"
        },
        {
          "name": "for",
          "description": "`for` {`string`} - The id of the element that the tooltip is anchored to. This element\nmust be a sibling of the tooltip. If this property is not set,\nthen the tooltip will be centered to the parent node containing it.\n\nProperty: for\n\nDefault: null"
        },
        {
          "name": "offset",
          "description": "`offset` {`number`} - The spacing between the top of the tooltip and the element it is\nanchored to.\n\nProperty: offset\n\nDefault: -10"
        },
        {
          "name": "position",
          "description": "`position` {`string`} - Positions the tooltip to the top, right, bottom, left of its content.\n\nProperty: position\n\nDefault: bottom"
        },
        {
          "name": "target",
          "description": "`target` - The actual target element\n\nProperty: target\n\nDefault: null"
        },
        {
          "name": "sticky",
          "description": "`sticky` {`boolean`} - Stays on screen while target is on screen\n\nProperty: sticky\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "hidden",
          "description": "`hidden` {`boolean`} - If true, no parts of the tooltip will ever be shown offscreen.\n\nProperty: hidden\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "__positions",
          "description": "`__positions` - The element's style\n\nProperty: __positions\n\nDefault: [object Object]"
        }
      ]
    }
  ],
  "globalAttributes": [],
  "valueSets": []
}