{
  "version": 1,
  "tags": [
    {
      "name": "simple-icon-picker",
      "description": "`simple-icon-picker`\nUses simple-picker to create an icon picker\n\nEvents:\n\n  * `value-changed` {`CustomEvent<{ value: any; }>`} - fires when value changes\n\n  * `changed` {`CustomEvent<this>`} - Fires when properties change\n\n  * `click` {`CustomEvent<this>`} - handles listbox click event\n\n  * `mousedown` {`CustomEvent<this>`} - fires with listbox mousedown event\n\n  * `keydown` {`CustomEvent<this>`} - \n\n  * `option-focus` {`CustomEvent<this>`} - fires when active descendant changes\n\n  * `change` {`CustomEvent<this>`} - fires when options or value changes\n\n  * `expand` {`CustomEvent<this>`} - fires when listbox is expanded\n\n  * `collapse` {`CustomEvent<this>`} - fires when listbox is collapsed\n\nAttributes:\n\n  * `include-sets` {`any[]`} - \n\n  * `exclude-sets` {`any[]`} - \n\n  * `exclude` {`any[]`} - \n\n  * `__iconList` {`any[]`} - An array of icons by name: ```\n[\n\"editor:format-paint\",\n\"content-copy\",\n\"av:volume-off\"\n\n]```\n\n  * `icons` {`any[]`} - An array of icons by name: ```\n[\n\"editor:format-paint\",\n\"content-copy\",\n\"av:volume-off\"\n\n]```\n\n  * `optionsPerRow` {`number`} - the maximum number of options per row\n\n  * `hide-null-option` {`boolean`} - hide the null option\nDefault behavior/false will select first option and set value accordingly.\n\n  * `justify` {`boolean`} - Box is 100% width of the ui\n\n  * `__options` {`any[]`} - An array of options for picker, eg.: `\n[\n[\n{\n  \"icon\": \"editor:format-paint\",      //Optional. Used if picker is used as an icon picker.\n  \"alt\": \"Blue\",                      //Required for accessibility. Alt text description of choice.\n  \"style\": \"background-color: blue;\", //Optional. Used to set an option's style.\n  ...                                 //Optional. Any other properties that should be captured as part of selected option's value\n},...\n]\n]`\n\n  * `allowNull` {`boolean`} - Allow a null option to be selected?\n\n  * `align-right` {`boolean`} - Align right edges of listbox and button?\nDefault behavior/false aligns to left edges.\n\n  * `aria-labelledby` {`string`} - Optional. Sets aria-labelledby attribute\n\n  * `block-label` {`boolean`} - Position label above select dropdown?\n\n  * `disabled` {`boolean`} - Is picker disabled?\n\n  * `expanded` {`boolean`} - Is it expanded?\n\n  * `hide-option-labels` {`boolean`} - Hide option labels? As color-picker or icon-picker, labels may be redundant.\nThis option would move labels off-screen so that only screen-readers will have them.\n\n  * `hide-sample` {`boolean`} - Hide selected item sample?\nDefault behavior/false shows a sample without expanding menu.\n\n  * `label` {`string`} - Optional. Label for picker input\n\n  * `__ready` {`boolean`} - \n\n  * `options` {`never[]`} - An array of options for picker, eg.: \n[\n[\n{\n  \"icon\": \"editor:format-paint\",      //Optional. Used if picker is used as an icon picker.\n  \"alt\": \"Blue\",                      //Required for accessibility. Alt text description of choice.\n  \"style\": \"background-color: blue;\", //Optional. Used to set an option's style.\n  ...                                 //Optional. Any other properties that should be captured as part of selected option's value\n},...\n]\n]\n\n  * `title-as-html` {`boolean`} - Renders html as title. (Good for titles with HTML in them.)\n\n  * `value` {`string`} - The value of the option.\n\n  * `__activeDesc` {`string`} - Aria-activedescendant attribute (active option's ID)\n\n  * `__selectedOption` - Selected option based on value of picker\n\nProperties:\n\n  * `includeSets` {`any[]`} - \n\n  * `excludeSets` {`any[]`} - \n\n  * `exclude` {`any[]`} - \n\n  * `__iconList` {`any[]`} - An array of icons by name: ```\n[\n\"editor:format-paint\",\n\"content-copy\",\n\"av:volume-off\"\n\n]```\n\n  * `icons` {`any[]`} - An array of icons by name: ```\n[\n\"editor:format-paint\",\n\"content-copy\",\n\"av:volume-off\"\n\n]```\n\n  * `optionsPerRow` {`number`} - the maximum number of options per row\n\n  * `hideNullOption` {`boolean`} - hide the null option\nDefault behavior/false will select first option and set value accordingly.\n\n  * `justify` {`boolean`} - Box is 100% width of the ui\n\n  * `__options` {`any[]`} - An array of options for picker, eg.: `\n[\n[\n{\n  \"icon\": \"editor:format-paint\",      //Optional. Used if picker is used as an icon picker.\n  \"alt\": \"Blue\",                      //Required for accessibility. Alt text description of choice.\n  \"style\": \"background-color: blue;\", //Optional. Used to set an option's style.\n  ...                                 //Optional. Any other properties that should be captured as part of selected option's value\n},...\n]\n]`\n\n  * `hideNull` - \n\n  * `tag` - \n\n  * `allowNull` {`boolean`} - Allow a null option to be selected?\n\n  * `alignRight` {`boolean`} - Align right edges of listbox and button?\nDefault behavior/false aligns to left edges.\n\n  * `ariaLabelledby` {`string`} - Optional. Sets aria-labelledby attribute\n\n  * `blockLabel` {`boolean`} - Position label above select dropdown?\n\n  * `disabled` {`boolean`} - Is picker disabled?\n\n  * `expanded` {`boolean`} - Is it expanded?\n\n  * `hideOptionLabels` {`boolean`} - Hide option labels? As color-picker or icon-picker, labels may be redundant.\nThis option would move labels off-screen so that only screen-readers will have them.\n\n  * `hideSample` {`boolean`} - Hide selected item sample?\nDefault behavior/false shows a sample without expanding menu.\n\n  * `label` {`string`} - Optional. Label for picker input\n\n  * `__ready` {`boolean`} - \n\n  * `options` {`never[]`} - An array of options for picker, eg.: \n[\n[\n{\n  \"icon\": \"editor:format-paint\",      //Optional. Used if picker is used as an icon picker.\n  \"alt\": \"Blue\",                      //Required for accessibility. Alt text description of choice.\n  \"style\": \"background-color: blue;\", //Optional. Used to set an option's style.\n  ...                                 //Optional. Any other properties that should be captured as part of selected option's value\n},...\n]\n]\n\n  * `titleAsHtml` {`boolean`} - Renders html as title. (Good for titles with HTML in them.)\n\n  * `value` {`string`} - The value of the option.\n\n  * `__activeDesc` {`string`} - Aria-activedescendant attribute (active option's ID)\n\n  * `__hasLabel` {`boolean`} - \n\n  * `__selectedOption` - Selected option based on value of picker",
      "attributes": [
        {
          "name": "include-sets",
          "description": "`include-sets` {`any[]`} - \n\nProperty: includeSets"
        },
        {
          "name": "exclude-sets",
          "description": "`exclude-sets` {`any[]`} - \n\nProperty: excludeSets"
        },
        {
          "name": "exclude",
          "description": "`exclude` {`any[]`} - \n\nProperty: exclude"
        },
        {
          "name": "__iconList",
          "description": "`__iconList` {`any[]`} - An array of icons by name: ```\n[\n\"editor:format-paint\",\n\"content-copy\",\n\"av:volume-off\"\n\n]```\n\nProperty: __iconList"
        },
        {
          "name": "icons",
          "description": "`icons` {`any[]`} - An array of icons by name: ```\n[\n\"editor:format-paint\",\n\"content-copy\",\n\"av:volume-off\"\n\n]```\n\nProperty: icons\n\nDefault: "
        },
        {
          "name": "optionsPerRow",
          "description": "`optionsPerRow` {`number`} - the maximum number of options per row\n\nProperty: optionsPerRow\n\nDefault: 6"
        },
        {
          "name": "hide-null-option",
          "description": "`hide-null-option` {`boolean`} - hide the null option\nDefault behavior/false will select first option and set value accordingly.\n\nProperty: hideNullOption",
          "valueSet": "v"
        },
        {
          "name": "justify",
          "description": "`justify` {`boolean`} - Box is 100% width of the ui\n\nProperty: justify",
          "valueSet": "v"
        },
        {
          "name": "__options",
          "description": "`__options` {`any[]`} - An array of options for picker, eg.: `\n[\n[\n{\n  \"icon\": \"editor:format-paint\",      //Optional. Used if picker is used as an icon picker.\n  \"alt\": \"Blue\",                      //Required for accessibility. Alt text description of choice.\n  \"style\": \"background-color: blue;\", //Optional. Used to set an option's style.\n  ...                                 //Optional. Any other properties that should be captured as part of selected option's value\n},...\n]\n]`\n\nProperty: __options"
        },
        {
          "name": "allowNull",
          "description": "`allowNull` {`boolean`} - Allow a null option to be selected?\n\nProperty: allowNull\n\nDefault: true",
          "valueSet": "v"
        },
        {
          "name": "align-right",
          "description": "`align-right` {`boolean`} - Align right edges of listbox and button?\nDefault behavior/false aligns to left edges.\n\nProperty: alignRight\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "aria-labelledby",
          "description": "`aria-labelledby` {`string`} - Optional. Sets aria-labelledby attribute\n\nProperty: ariaLabelledby\n\nDefault: null"
        },
        {
          "name": "block-label",
          "description": "`block-label` {`boolean`} - Position label above select dropdown?\n\nProperty: blockLabel\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "disabled",
          "description": "`disabled` {`boolean`} - Is picker disabled?\n\nProperty: disabled\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "expanded",
          "description": "`expanded` {`boolean`} - Is it expanded?\n\nProperty: expanded\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "hide-option-labels",
          "description": "`hide-option-labels` {`boolean`} - Hide option labels? As color-picker or icon-picker, labels may be redundant.\nThis option would move labels off-screen so that only screen-readers will have them.\n\nProperty: hideOptionLabels\n\nDefault: true",
          "valueSet": "v"
        },
        {
          "name": "hide-sample",
          "description": "`hide-sample` {`boolean`} - Hide selected item sample?\nDefault behavior/false shows a sample without expanding menu.\n\nProperty: hideSample\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "label",
          "description": "`label` {`string`} - Optional. Label for picker input\n\nProperty: label\n\nDefault: null"
        },
        {
          "name": "__ready",
          "description": "`__ready` {`boolean`} - \n\nProperty: __ready\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "options",
          "description": "`options` {`never[]`} - An array of options for picker, eg.: \n[\n[\n{\n  \"icon\": \"editor:format-paint\",      //Optional. Used if picker is used as an icon picker.\n  \"alt\": \"Blue\",                      //Required for accessibility. Alt text description of choice.\n  \"style\": \"background-color: blue;\", //Optional. Used to set an option's style.\n  ...                                 //Optional. Any other properties that should be captured as part of selected option's value\n},...\n]\n]\n\nProperty: options\n\nDefault: "
        },
        {
          "name": "title-as-html",
          "description": "`title-as-html` {`boolean`} - Renders html as title. (Good for titles with HTML in them.)\n\nProperty: titleAsHtml\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "value",
          "description": "`value` {`string`} - The value of the option.\n\nProperty: value\n\nDefault: null"
        },
        {
          "name": "__activeDesc",
          "description": "`__activeDesc` {`string`} - Aria-activedescendant attribute (active option's ID)\n\nProperty: __activeDesc\n\nDefault: option-0-0"
        },
        {
          "name": "__selectedOption",
          "description": "`__selectedOption` - Selected option based on value of picker\n\nProperty: __selectedOption\n\nDefault: [object Object]"
        },
        {
          "name": "onvalue-changed",
          "description": "`value-changed` {`CustomEvent<{ value: any; }>`} - fires when value changes"
        },
        {
          "name": "onchanged",
          "description": "`changed` {`CustomEvent<this>`} - Fires when properties change"
        },
        {
          "name": "onclick",
          "description": "`click` {`CustomEvent<this>`} - handles listbox click event"
        },
        {
          "name": "onmousedown",
          "description": "`mousedown` {`CustomEvent<this>`} - fires with listbox mousedown event"
        },
        {
          "name": "onkeydown",
          "description": "`keydown` {`CustomEvent<this>`} - "
        },
        {
          "name": "onoption-focus",
          "description": "`option-focus` {`CustomEvent<this>`} - fires when active descendant changes"
        },
        {
          "name": "onchange",
          "description": "`change` {`CustomEvent<this>`} - fires when options or value changes"
        },
        {
          "name": "onexpand",
          "description": "`expand` {`CustomEvent<this>`} - fires when listbox is expanded"
        },
        {
          "name": "oncollapse",
          "description": "`collapse` {`CustomEvent<this>`} - fires when listbox is collapsed"
        }
      ]
    }
  ],
  "globalAttributes": [],
  "valueSets": []
}