{
  "version": 1,
  "tags": [
    {
      "name": "code-editor",
      "description": "`code-editor`\n`Wrapper on top of a code editor`\n\nEvents:\n\n  * `show-code-pen-changed` {`CustomEvent<{ value: any; }>`} - \n\n  * `value-changed` {`CustomEvent<{ value: any; }>`} - \n\n  * `focused-changed` {`CustomEvent<{ focused: any; }>`} - \n\nAttributes:\n\n  * `title` {`string`} - Title\n\n  * `editor-value` {`string`} - contents of the editor\n\n  * `value` {`string`} - value of the editor after the fact\n\n  * `mode` {`string`} - Mode / language for editor\n\n  * `ready` {`boolean`} - \n\n  * `code-pen-data` - Code pen data, computed based on the HTML editor\n\n  * `show-code-pen` {`boolean`} - Show codePen button to fork it to there to run\n\n  * `read-only` {`boolean`} - Readonly setting for the editor\n\n  * `theme` {`string`} - Theme for the Ace editor.\n\n  * `language` {`string`} - Language to present color coding for\n\n  * `font-size` {`number`} - font size for the editor\n\n  * `word-wrap` {`boolean`} - \n\n  * `tab-size` {`number`} - number of characters for tabs\n\n  * `autofocus` {`boolean`} - automatically set focus on the editor\n\n  * `hide-line-numbers` {`boolean`} - hide the line numbers\n\n  * `focused` {`boolean`} - does the monaco-editor have focus\n\n  * `libPath` {`string`} - \n\n  * `schemaMap` - Schema Map for the element, used to generate a valid prefix on the fly\nProps set for Polymer compatibility\n\nProperties:\n\n  * `placeholder` {`string`} - \n\n  * `title` {`string`} - Title\n\n  * `editorValue` {`string`} - contents of the editor\n\n  * `value` {`string`} - value of the editor after the fact\n\n  * `mode` {`string`} - Mode / language for editor\n\n  * `ready` {`boolean`} - \n\n  * `codePenData` - Code pen data, computed based on the HTML editor\n\n  * `haxUIElement` {`boolean`} - \n\n  * `showCodePen` {`boolean`} - Show codePen button to fork it to there to run\n\n  * `readOnly` {`boolean`} - Readonly setting for the editor\n\n  * `theme` {`string`} - Theme for the Ace editor.\n\n  * `language` {`string`} - Language to present color coding for\n\n  * `fontSize` {`number`} - font size for the editor\n\n  * `wordWrap` {`boolean`} - \n\n  * `tabSize` {`number`} - number of characters for tabs\n\n  * `autofocus` {`boolean`} - automatically set focus on the editor\n\n  * `hideLineNumbers` {`boolean`} - hide the line numbers\n\n  * `focused` {`boolean`} - does the monaco-editor have focus\n\n  * `libPath` {`string`} - \n\n  * `schemaResourceID` {`string`} - \n\n  * `schemaMap` - Schema Map for the element, used to generate a valid prefix on the fly\nProps set for Polymer compatibility",
      "attributes": [
        {
          "name": "title",
          "description": "`title` {`string`} - Title\n\nProperty: title"
        },
        {
          "name": "editor-value",
          "description": "`editor-value` {`string`} - contents of the editor\n\nProperty: editorValue"
        },
        {
          "name": "value",
          "description": "`value` {`string`} - value of the editor after the fact\n\nProperty: value"
        },
        {
          "name": "mode",
          "description": "`mode` {`string`} - Mode / language for editor\n\nProperty: mode"
        },
        {
          "name": "ready",
          "description": "`ready` {`boolean`} - \n\nProperty: ready",
          "valueSet": "v"
        },
        {
          "name": "code-pen-data",
          "description": "`code-pen-data` - Code pen data, computed based on the HTML editor\n\nProperty: codePenData\n\nDefault: null"
        },
        {
          "name": "show-code-pen",
          "description": "`show-code-pen` {`boolean`} - Show codePen button to fork it to there to run\n\nProperty: showCodePen\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "read-only",
          "description": "`read-only` {`boolean`} - Readonly setting for the editor\n\nProperty: readOnly\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "theme",
          "description": "`theme` {`string`} - Theme for the Ace editor.\n\nProperty: theme\n\nDefault: vs-dark"
        },
        {
          "name": "language",
          "description": "`language` {`string`} - Language to present color coding for\n\nProperty: language\n\nDefault: javascript"
        },
        {
          "name": "font-size",
          "description": "`font-size` {`number`} - font size for the editor\n\nProperty: fontSize\n\nDefault: 16"
        },
        {
          "name": "word-wrap",
          "description": "`word-wrap` {`boolean`} - \n\nProperty: wordWrap\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "tab-size",
          "description": "`tab-size` {`number`} - number of characters for tabs\n\nProperty: tabSize\n\nDefault: 2"
        },
        {
          "name": "autofocus",
          "description": "`autofocus` {`boolean`} - automatically set focus on the editor\n\nProperty: autofocus\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "hide-line-numbers",
          "description": "`hide-line-numbers` {`boolean`} - hide the line numbers\n\nProperty: hideLineNumbers\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "focused",
          "description": "`focused` {`boolean`} - does the monaco-editor have focus\n\nProperty: focused\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "libPath",
          "description": "`libPath` {`string`} - \n\nProperty: libPath\n\nDefault: monaco-editor/min/vs"
        },
        {
          "name": "schemaMap",
          "description": "`schemaMap` - Schema Map for the element, used to generate a valid prefix on the fly\nProps set for Polymer compatibility\n\nProperty: schemaMap\n\nDefault: [object Object]"
        },
        {
          "name": "onshow-code-pen-changed",
          "description": "`show-code-pen-changed` {`CustomEvent<{ value: any; }>`} - "
        },
        {
          "name": "onvalue-changed",
          "description": "`value-changed` {`CustomEvent<{ value: any; }>`} - "
        },
        {
          "name": "onfocused-changed",
          "description": "`focused-changed` {`CustomEvent<{ focused: any; }>`} - "
        }
      ]
    },
    {
      "name": "code-pen-button",
      "description": "`code-pen-button`\n`Post data to codepen to form a new pen`\n\nAttributes:\n\n  * `check-it-out` {`string`} - \n\n  * `end-point` {`string`} - End point for posting should it change in the future.\n\n  * `data` - Data object to post to code pen\n\n  * `data-string` {`string`} - Data object as a JSON string for the POST data in page.\n\nProperties:\n\n  * `checkItOut` {`string`} - \n\n  * `endPoint` {`string`} - End point for posting should it change in the future.\n\n  * `data` - Data object to post to code pen\n\n  * `dataString` {`string`} - Data object as a JSON string for the POST data in page.",
      "attributes": [
        {
          "name": "check-it-out",
          "description": "`check-it-out` {`string`} - \n\nProperty: checkItOut\n\nDefault: Check it out on codepen"
        },
        {
          "name": "end-point",
          "description": "`end-point` {`string`} - End point for posting should it change in the future.\n\nProperty: endPoint\n\nDefault: https://codepen.io/pen/define"
        },
        {
          "name": "data",
          "description": "`data` - Data object to post to code pen\n\nProperty: data\n\nDefault: [object Object]"
        },
        {
          "name": "data-string",
          "description": "`data-string` {`string`} - Data object as a JSON string for the POST data in page.\n\nProperty: dataString\n\nDefault: "
        }
      ]
    }
  ],
  "globalAttributes": [],
  "valueSets": []
}