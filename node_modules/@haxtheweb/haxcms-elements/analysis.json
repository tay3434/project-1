{
  "schema_version": "1.0.0",
  "classes": [
    {
      "description": "Creates the global IntersectionObserverEntry constructor.\nhttps://w3c.github.io/IntersectionObserver/#intersection-observer-entry",
      "summary": "",
      "path": "demo/index.html",
      "properties": [],
      "methods": [],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 200,
          "column": 42
        },
        "end": {
          "line": 223,
          "column": 1
        }
      },
      "privacy": "public",
      "name": "IntersectionObserverEntry"
    },
    {
      "description": "Creates the global IntersectionObserver constructor.\nhttps://w3c.github.io/IntersectionObserver/#intersection-observer-interface",
      "summary": "",
      "path": "demo/index.html",
      "properties": [
        {
          "name": "THROTTLE_TIMEOUT",
          "type": "number",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 279,
              "column": 0
            },
            "end": {
              "line": 279,
              "column": 53
            }
          },
          "metadata": {}
        },
        {
          "name": "POLL_INTERVAL",
          "type": "null",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 287,
              "column": 0
            },
            "end": {
              "line": 287,
              "column": 51
            }
          },
          "metadata": {}
        },
        {
          "name": "USE_MUTATION_OBSERVER",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 293,
              "column": 0
            },
            "end": {
              "line": 293,
              "column": 59
            }
          },
          "metadata": {}
        }
      ],
      "methods": [
        {
          "name": "observe",
          "description": "Starts observing a target element for intersection changes based on\nthe thresholds values.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 340,
              "column": 41
            },
            "end": {
              "line": 357,
              "column": 1
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "target",
              "type": "Element",
              "description": "The DOM element to observe."
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "unobserve",
          "description": "Stops observing a target element for intersection changes.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 364,
              "column": 43
            },
            "end": {
              "line": 373,
              "column": 1
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "target",
              "type": "Element",
              "description": "The DOM element to observe."
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "disconnect",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 379,
              "column": 44
            },
            "end": {
              "line": 383,
              "column": 1
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "takeRecords",
          "description": "Returns any queue entries that have not yet been reported to the\ncallback and clears the queue. This can be used in conjunction with the\ncallback to obtain the absolute most up-to-date intersection information.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 392,
              "column": 45
            },
            "end": {
              "line": 396,
              "column": 1
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Array",
            "desc": "The currently queued entries."
          }
        },
        {
          "name": "_initThresholds",
          "description": "Accepts the threshold value from the user configuration object and\nreturns a sorted array of unique threshold values. If a value is not\nbetween 0 and 1 and error is thrown.",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 408,
              "column": 49
            },
            "end": {
              "line": 418,
              "column": 1
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "opt_threshold",
              "type": "(Array | number)=",
              "description": "An optional threshold value or\n    a list of threshold values, defaulting to [0]."
            }
          ],
          "return": {
            "type": "Array",
            "desc": "A sorted list of unique and valid threshold values."
          }
        },
        {
          "name": "_parseRootMargin",
          "description": "Accepts the rootMargin value from the user configuration object\nand returns an array of the four margin values as an object containing\nthe value and unit properties. If any of the values are not properly\nformatted or use a unit other than px or %, and error is thrown.",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 432,
              "column": 50
            },
            "end": {
              "line": 448,
              "column": 1
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "opt_rootMargin",
              "type": "string=",
              "description": "An optional rootMargin value,\n    defaulting to '0px'."
            }
          ],
          "return": {
            "type": "Array.<Object>",
            "desc": "An array of margin objects with the keys\n    value and unit."
          }
        },
        {
          "name": "_monitorIntersections",
          "description": "Starts polling for intersection changes if the polling is not already\nhappening, and if the page's visibility state is visible.",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 457,
              "column": 55
            },
            "end": {
              "line": 519,
              "column": 1
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "doc",
              "type": "!Document"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_unmonitorIntersections",
          "description": "Stops polling for intersection changes.",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 527,
              "column": 57
            },
            "end": {
              "line": 571,
              "column": 1
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "doc",
              "type": "!Document"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_unmonitorAllIntersections",
          "description": "Stops polling for intersection changes.",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 579,
              "column": 60
            },
            "end": {
              "line": 586,
              "column": 1
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_checkForIntersections",
          "description": "Scans each observation target for intersection changes and adds them\nto the internal entries queue. If new entries are found, it\nschedules the callback to be invoked.",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 595,
              "column": 56
            },
            "end": {
              "line": 648,
              "column": 1
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_computeTargetAndRootIntersection",
          "description": "Accepts a target and root rect computes the intersection between then\nfollowing the algorithm in the spec.\nTODO(philipwalton): at this time clip-path is not considered.\nhttps://w3c.github.io/IntersectionObserver/#calculate-intersection-rect-algo",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 665,
              "column": 4
            },
            "end": {
              "line": 734,
              "column": 1
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "target",
              "type": "Element",
              "description": "The target DOM element"
            },
            {
              "name": "targetRect",
              "type": "Object",
              "description": "The bounding rect of the target."
            },
            {
              "name": "rootRect",
              "type": "Object",
              "description": "The bounding rect of the root after being\n    expanded by the rootMargin value."
            }
          ],
          "return": {
            "type": "?Object",
            "desc": "The final intersection rect object or undefined if no\n    intersection is found."
          }
        },
        {
          "name": "_getRootRect",
          "description": "Returns the root rect after being expanded by the rootMargin value.",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 742,
              "column": 46
            },
            "end": {
              "line": 761,
              "column": 1
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "ClientRect",
            "desc": "The expanded root rect."
          }
        },
        {
          "name": "_expandRectByRootMargin",
          "description": "Accepts a rect and expands it by the rootMargin value.",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 770,
              "column": 57
            },
            "end": {
              "line": 785,
              "column": 1
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "rect",
              "type": "(DOMRect | ClientRect)",
              "description": "The rect object to expand."
            }
          ],
          "return": {
            "type": "ClientRect",
            "desc": "The expanded rect."
          }
        },
        {
          "name": "_hasCrossedThreshold",
          "description": "Accepts an old and new entry and returns true if at least one of the\nthreshold values has been crossed.",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 799,
              "column": 4
            },
            "end": {
              "line": 821,
              "column": 1
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "oldEntry",
              "type": "?IntersectionObserverEntry",
              "description": "The previous entry for a\n   particular target element or null if no previous entry exists."
            },
            {
              "name": "newEntry",
              "type": "IntersectionObserverEntry",
              "description": "The current entry for a\n   particular target element."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "Returns true if a any threshold has been crossed."
          }
        },
        {
          "name": "_rootIsInDom",
          "description": "Returns whether or not the root element is an element and is in the DOM.",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 829,
              "column": 46
            },
            "end": {
              "line": 831,
              "column": 1
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "boolean",
            "desc": "True if the root element is an element and is in the DOM."
          }
        },
        {
          "name": "_rootContainsTarget",
          "description": "Returns whether or not the target element is a child of root.",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 840,
              "column": 53
            },
            "end": {
              "line": 847,
              "column": 1
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "target",
              "type": "Element",
              "description": "The target element to check."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the target element is a child of root."
          }
        },
        {
          "name": "_registerInstance",
          "description": "Adds the instance to the global IntersectionObserver registry if it isn't\nalready present.",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 855,
              "column": 51
            },
            "end": {
              "line": 859,
              "column": 1
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_unregisterInstance",
          "description": "Removes the instance from the global IntersectionObserver registry.",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 866,
              "column": 53
            },
            "end": {
              "line": 869,
              "column": 1
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 235,
          "column": 53
        },
        "end": {
          "line": 272,
          "column": 1
        }
      },
      "privacy": "public",
      "name": "IntersectionObserver"
    }
  ]
}
